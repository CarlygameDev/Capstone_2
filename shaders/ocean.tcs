#version 410 core

layout(vertices = 3) out; // Tessellating triangles

uniform vec3 cameraPos;
uniform float maxTessLevel = 8.0;  // Maximum tessellation level (clamped for stability)
uniform float minTessLevel = 2.0;   // Minimum safe tessellation level
uniform float minDistance = 50.0;   // Distance where max tessellation applies
uniform float maxDistance = 100.0;  // Distance where tessellation is minimal

void main()
{
    if (gl_InvocationID == 0) // Only run once per patch
    {
        // Compute the closest distance of the patch to the camera
        float distance0 = length(cameraPos - gl_in[0].gl_Position.xyz);
        float distance1 = length(cameraPos - gl_in[1].gl_Position.xyz);
        float distance2 = length(cameraPos - gl_in[2].gl_Position.xyz);

        float minDist = min(distance0, min(distance1, distance2));

        // **Smooth Adaptive Tessellation** using an exponential function
        float tessFactor = clamp((minDist - minDistance) / (maxDistance - minDistance), 0.0, 1.0);
        float tessLevel = mix(maxTessLevel, minTessLevel, pow(tessFactor, 1.5)); // Exponential smoothing

       // Compute tessellation levels for each vertex
float tessLevel0 = mix(maxTessLevel, 1.0, clamp((distance0 - minDistance) / (maxDistance - minDistance), 0.0, 1.0));
float tessLevel1 = mix(maxTessLevel, 1.0, clamp((distance1 - minDistance) / (maxDistance - minDistance), 0.0, 1.0));
float tessLevel2 = mix(maxTessLevel, 1.0, clamp((distance2 - minDistance) / (maxDistance - minDistance), 0.0, 1.0));

// Pick the **minimum** tessellation level for shared edges
gl_TessLevelOuter[0] = min(tessLevel1, tessLevel2);
gl_TessLevelOuter[1] = min(tessLevel2, tessLevel0);
gl_TessLevelOuter[2] = min(tessLevel0, tessLevel1);
gl_TessLevelInner[0] = (gl_TessLevelOuter[0] + gl_TessLevelOuter[1] + gl_TessLevelOuter[2]) / 3.0;

    }

    // Pass vertex positions to the evaluation shader
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}




