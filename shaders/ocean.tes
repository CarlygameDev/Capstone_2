#version 410 core

layout(triangles, fractional_even_spacing) in;
out vec4 fragFBM; 
out vec3 fragPosition; 

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;
uniform float time;

float amplitude = 2.0;
float wave_length = 20.0;
float speed = 20.0f;
int waves = 32;
float k = 2;
float warpStrength = 0.1f;

void main()
{
    // Interpolated position using barycentric coordinates
    vec3 finalPosition =
        gl_TessCoord.x * gl_in[0].gl_Position.xyz +
        gl_TessCoord.y * gl_in[1].gl_Position.xyz +
        gl_TessCoord.z * gl_in[2].gl_Position.xyz;

    vec3 position = finalPosition;
    float amplitudeSum = 0.0;
    vec3 tangentX = vec3(1.0, 0.0, 0.0);
    vec3 tangentZ = vec3(0.0, 0.0, 1.0);
    float h = 0.0;

    float currentAmplitude = amplitude;
    float currentWavelength = wave_length;

    for (int i = 0; i < waves; i++) {
        float phase = float(i) * 0.5;
        vec2 direction = normalize(vec2(cos(phase), sin(phase)));
        float wave_frequency = 2.0 / currentWavelength;
        float wave_speed = speed * wave_frequency + float(i) * 0.1;

        float wave_dot = dot(direction, position.xz) * wave_frequency + time * wave_speed;
        float sinWave = sin(wave_dot);
        float cosWave = cos(wave_dot);

        float waveHeight = 2.0 * currentAmplitude * pow((sinWave + 1.0) / 2.0, k);
        h += waveHeight;

        float partialDerivativeBase = pow((sinWave + 1.0) / 2.0, k - 1.0);
        float dx = k * wave_frequency * partialDerivativeBase * cosWave;

        vec2 warpOffset = direction * dx * warpStrength * currentAmplitude;
        tangentX.y += warpOffset.x;
        tangentZ.y += warpOffset.y;
        position.xz -= warpOffset;

        currentAmplitude *= 0.85;
        currentWavelength *= 1.2;
        amplitudeSum += currentAmplitude;
    }

    vec3 normal = normalize(cross(tangentX, tangentZ));

    // Apply displacement
    finalPosition.y += h;
    fragPosition = finalPosition;
    fragFBM = normalize(vec4(normal, h / amplitudeSum));

    gl_Position = projection * view * vec4(finalPosition, 1.0);
}

